// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IR_PALETTE_DATA_VGPB.proto

package com.aolais.electroraven.is2viewerbeta.protos;

public final class IrPaletteDataVGPB {
  private IrPaletteDataVGPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code PaletteSchemes}
   */
  public enum PaletteSchemes
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PALSCHEME_GRAYSCALE = 0;</code>
     */
    PALSCHEME_GRAYSCALE(0, 0),
    /**
     * <code>PALSCHEME_GRAYSCALE_INVERTED = 1;</code>
     */
    PALSCHEME_GRAYSCALE_INVERTED(1, 1),
    /**
     * <code>PALSCHEME_BLUERED = 2;</code>
     */
    PALSCHEME_BLUERED(2, 2),
    /**
     * <code>PALSCHEME_HIGHCONTRAST = 3;</code>
     */
    PALSCHEME_HIGHCONTRAST(3, 3),
    /**
     * <code>PALSCHEME_HOTMETAL = 4;</code>
     */
    PALSCHEME_HOTMETAL(4, 4),
    /**
     * <code>PALSCHEME_IRONBOW = 5;</code>
     */
    PALSCHEME_IRONBOW(5, 5),
    /**
     * <code>PALSCHEME_AMBER = 6;</code>
     */
    PALSCHEME_AMBER(6, 6),
    /**
     * <code>PALSCHEME_AMBER_INVERTED = 7;</code>
     */
    PALSCHEME_AMBER_INVERTED(7, 7),
    /**
     * <code>PALSCHEME_RAINBOW = 8;</code>
     */
    PALSCHEME_RAINBOW(8, 8),
    /**
     * <code>PALSCHEME_RAINBOW900 = 9;</code>
     */
    PALSCHEME_RAINBOW900(9, 9),
    /**
     * <code>PALSCHEME_GLOWBOW = 10;</code>
     */
    PALSCHEME_GLOWBOW(10, 10),
    /**
     * <code>PALSCHEME_CUSTOM = 11;</code>
     */
    PALSCHEME_CUSTOM(11, 11),
    /**
     * <code>PALSCHEME_HIGH_CONTRAST_VT = 12;</code>
     */
    PALSCHEME_HIGH_CONTRAST_VT(12, 12),
    /**
     * <code>PALSCHEME_RAINBOW_VT = 13;</code>
     */
    PALSCHEME_RAINBOW_VT(13, 13),
    /**
     * <code>PALSCHEME_IRONBOW_VT = 14;</code>
     */
    PALSCHEME_IRONBOW_VT(14, 14),
    /**
     * <code>PALSCHEME_HOTMETAL_VT = 15;</code>
     */
    PALSCHEME_HOTMETAL_VT(15, 15),
    ;

    /**
     * <code>PALSCHEME_GRAYSCALE = 0;</code>
     */
    public static final int PALSCHEME_GRAYSCALE_VALUE = 0;
    /**
     * <code>PALSCHEME_GRAYSCALE_INVERTED = 1;</code>
     */
    public static final int PALSCHEME_GRAYSCALE_INVERTED_VALUE = 1;
    /**
     * <code>PALSCHEME_BLUERED = 2;</code>
     */
    public static final int PALSCHEME_BLUERED_VALUE = 2;
    /**
     * <code>PALSCHEME_HIGHCONTRAST = 3;</code>
     */
    public static final int PALSCHEME_HIGHCONTRAST_VALUE = 3;
    /**
     * <code>PALSCHEME_HOTMETAL = 4;</code>
     */
    public static final int PALSCHEME_HOTMETAL_VALUE = 4;
    /**
     * <code>PALSCHEME_IRONBOW = 5;</code>
     */
    public static final int PALSCHEME_IRONBOW_VALUE = 5;
    /**
     * <code>PALSCHEME_AMBER = 6;</code>
     */
    public static final int PALSCHEME_AMBER_VALUE = 6;
    /**
     * <code>PALSCHEME_AMBER_INVERTED = 7;</code>
     */
    public static final int PALSCHEME_AMBER_INVERTED_VALUE = 7;
    /**
     * <code>PALSCHEME_RAINBOW = 8;</code>
     */
    public static final int PALSCHEME_RAINBOW_VALUE = 8;
    /**
     * <code>PALSCHEME_RAINBOW900 = 9;</code>
     */
    public static final int PALSCHEME_RAINBOW900_VALUE = 9;
    /**
     * <code>PALSCHEME_GLOWBOW = 10;</code>
     */
    public static final int PALSCHEME_GLOWBOW_VALUE = 10;
    /**
     * <code>PALSCHEME_CUSTOM = 11;</code>
     */
    public static final int PALSCHEME_CUSTOM_VALUE = 11;
    /**
     * <code>PALSCHEME_HIGH_CONTRAST_VT = 12;</code>
     */
    public static final int PALSCHEME_HIGH_CONTRAST_VT_VALUE = 12;
    /**
     * <code>PALSCHEME_RAINBOW_VT = 13;</code>
     */
    public static final int PALSCHEME_RAINBOW_VT_VALUE = 13;
    /**
     * <code>PALSCHEME_IRONBOW_VT = 14;</code>
     */
    public static final int PALSCHEME_IRONBOW_VT_VALUE = 14;
    /**
     * <code>PALSCHEME_HOTMETAL_VT = 15;</code>
     */
    public static final int PALSCHEME_HOTMETAL_VT_VALUE = 15;


    public final int getNumber() { return value; }

    public static PaletteSchemes valueOf(int value) {
      switch (value) {
        case 0: return PALSCHEME_GRAYSCALE;
        case 1: return PALSCHEME_GRAYSCALE_INVERTED;
        case 2: return PALSCHEME_BLUERED;
        case 3: return PALSCHEME_HIGHCONTRAST;
        case 4: return PALSCHEME_HOTMETAL;
        case 5: return PALSCHEME_IRONBOW;
        case 6: return PALSCHEME_AMBER;
        case 7: return PALSCHEME_AMBER_INVERTED;
        case 8: return PALSCHEME_RAINBOW;
        case 9: return PALSCHEME_RAINBOW900;
        case 10: return PALSCHEME_GLOWBOW;
        case 11: return PALSCHEME_CUSTOM;
        case 12: return PALSCHEME_HIGH_CONTRAST_VT;
        case 13: return PALSCHEME_RAINBOW_VT;
        case 14: return PALSCHEME_IRONBOW_VT;
        case 15: return PALSCHEME_HOTMETAL_VT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PaletteSchemes>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<PaletteSchemes>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PaletteSchemes>() {
            public PaletteSchemes findValueByNumber(int number) {
              return PaletteSchemes.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.getDescriptor().getEnumTypes().get(0);
    }

    private static final PaletteSchemes[] VALUES = values();

    public static PaletteSchemes valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private PaletteSchemes(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PaletteSchemes)
  }

  /**
   * Protobuf enum {@code PaletteScaleMode}
   */
  public enum PaletteScaleMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PSM_AUTO = 0;</code>
     */
    PSM_AUTO(0, 0),
    /**
     * <code>PSM_FIX_MAX = 1;</code>
     */
    PSM_FIX_MAX(1, 1),
    /**
     * <code>PSM_FIX_MIN = 2;</code>
     */
    PSM_FIX_MIN(2, 2),
    /**
     * <code>PSM_FIX_BOTH = 3;</code>
     */
    PSM_FIX_BOTH(3, 3),
    ;

    /**
     * <code>PSM_AUTO = 0;</code>
     */
    public static final int PSM_AUTO_VALUE = 0;
    /**
     * <code>PSM_FIX_MAX = 1;</code>
     */
    public static final int PSM_FIX_MAX_VALUE = 1;
    /**
     * <code>PSM_FIX_MIN = 2;</code>
     */
    public static final int PSM_FIX_MIN_VALUE = 2;
    /**
     * <code>PSM_FIX_BOTH = 3;</code>
     */
    public static final int PSM_FIX_BOTH_VALUE = 3;


    public final int getNumber() { return value; }

    public static PaletteScaleMode valueOf(int value) {
      switch (value) {
        case 0: return PSM_AUTO;
        case 1: return PSM_FIX_MAX;
        case 2: return PSM_FIX_MIN;
        case 3: return PSM_FIX_BOTH;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PaletteScaleMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<PaletteScaleMode>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PaletteScaleMode>() {
            public PaletteScaleMode findValueByNumber(int number) {
              return PaletteScaleMode.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.getDescriptor().getEnumTypes().get(1);
    }

    private static final PaletteScaleMode[] VALUES = values();

    public static PaletteScaleMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private PaletteScaleMode(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PaletteScaleMode)
  }

  /**
   * Protobuf enum {@code PaletteSaturationColorChoice}
   */
  public enum PaletteSaturationColorChoice
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PSCC_OFF = 0;</code>
     */
    PSCC_OFF(0, 0),
    /**
     * <code>PSCC_STANDARD = 1;</code>
     */
    PSCC_STANDARD(1, 1),
    /**
     * <code>PSCC_WHITEBLACK = 2;</code>
     */
    PSCC_WHITEBLACK(2, 2),
    /**
     * <code>PSCC_REDBLUE = 3;</code>
     */
    PSCC_REDBLUE(3, 3),
    /**
     * <code>PSCC_CUSTOM = 4;</code>
     */
    PSCC_CUSTOM(4, 4),
    ;

    /**
     * <code>PSCC_OFF = 0;</code>
     */
    public static final int PSCC_OFF_VALUE = 0;
    /**
     * <code>PSCC_STANDARD = 1;</code>
     */
    public static final int PSCC_STANDARD_VALUE = 1;
    /**
     * <code>PSCC_WHITEBLACK = 2;</code>
     */
    public static final int PSCC_WHITEBLACK_VALUE = 2;
    /**
     * <code>PSCC_REDBLUE = 3;</code>
     */
    public static final int PSCC_REDBLUE_VALUE = 3;
    /**
     * <code>PSCC_CUSTOM = 4;</code>
     */
    public static final int PSCC_CUSTOM_VALUE = 4;


    public final int getNumber() { return value; }

    public static PaletteSaturationColorChoice valueOf(int value) {
      switch (value) {
        case 0: return PSCC_OFF;
        case 1: return PSCC_STANDARD;
        case 2: return PSCC_WHITEBLACK;
        case 3: return PSCC_REDBLUE;
        case 4: return PSCC_CUSTOM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PaletteSaturationColorChoice>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<PaletteSaturationColorChoice>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PaletteSaturationColorChoice>() {
            public PaletteSaturationColorChoice findValueByNumber(int number) {
              return PaletteSaturationColorChoice.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.getDescriptor().getEnumTypes().get(2);
    }

    private static final PaletteSaturationColorChoice[] VALUES = values();

    public static PaletteSaturationColorChoice valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private PaletteSaturationColorChoice(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PaletteSaturationColorChoice)
  }

  /**
   * Protobuf enum {@code PaletteModeType}
   */
  public enum PaletteModeType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LINEAR = 0;</code>
     */
    LINEAR(0, 0),
    /**
     * <code>ULTRA_CONTRAST = 1;</code>
     */
    ULTRA_CONTRAST(1, 1),
    ;

    /**
     * <code>LINEAR = 0;</code>
     */
    public static final int LINEAR_VALUE = 0;
    /**
     * <code>ULTRA_CONTRAST = 1;</code>
     */
    public static final int ULTRA_CONTRAST_VALUE = 1;


    public final int getNumber() { return value; }

    public static PaletteModeType valueOf(int value) {
      switch (value) {
        case 0: return LINEAR;
        case 1: return ULTRA_CONTRAST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PaletteModeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<PaletteModeType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PaletteModeType>() {
            public PaletteModeType findValueByNumber(int number) {
              return PaletteModeType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.getDescriptor().getEnumTypes().get(3);
    }

    private static final PaletteModeType[] VALUES = values();

    public static PaletteModeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private PaletteModeType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PaletteModeType)
  }

  /**
   * Protobuf enum {@code TEMP_ALARM_MODE}
   */
  public enum TEMP_ALARM_MODE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TEMP_ALARM_DISABLED = 0;</code>
     */
    TEMP_ALARM_DISABLED(0, 0),
    /**
     * <code>TEMP_ALARM_ENABLED_ABOVE_MAX_THRESHOLD = 1;</code>
     */
    TEMP_ALARM_ENABLED_ABOVE_MAX_THRESHOLD(1, 1),
    /**
     * <code>TEMP_ALARM_ENABLED_BELOW_MIN_THRESHOLD = 2;</code>
     */
    TEMP_ALARM_ENABLED_BELOW_MIN_THRESHOLD(2, 2),
    /**
     * <code>TEMP_ALARM_ENABLED_BETWEEN_MIN_MAX_THRESHOLDS = 3;</code>
     */
    TEMP_ALARM_ENABLED_BETWEEN_MIN_MAX_THRESHOLDS(3, 3),
    /**
     * <code>TEMP_ALARM_ENABLED_OUTSIDE_MIN_MAX_THRESHOLDS = 4;</code>
     */
    TEMP_ALARM_ENABLED_OUTSIDE_MIN_MAX_THRESHOLDS(4, 4),
    /**
     * <code>TEMP_ALARM_ISOTHERM = 5;</code>
     */
    TEMP_ALARM_ISOTHERM(5, 5),
    ;

    /**
     * <code>TEMP_ALARM_DISABLED = 0;</code>
     */
    public static final int TEMP_ALARM_DISABLED_VALUE = 0;
    /**
     * <code>TEMP_ALARM_ENABLED_ABOVE_MAX_THRESHOLD = 1;</code>
     */
    public static final int TEMP_ALARM_ENABLED_ABOVE_MAX_THRESHOLD_VALUE = 1;
    /**
     * <code>TEMP_ALARM_ENABLED_BELOW_MIN_THRESHOLD = 2;</code>
     */
    public static final int TEMP_ALARM_ENABLED_BELOW_MIN_THRESHOLD_VALUE = 2;
    /**
     * <code>TEMP_ALARM_ENABLED_BETWEEN_MIN_MAX_THRESHOLDS = 3;</code>
     */
    public static final int TEMP_ALARM_ENABLED_BETWEEN_MIN_MAX_THRESHOLDS_VALUE = 3;
    /**
     * <code>TEMP_ALARM_ENABLED_OUTSIDE_MIN_MAX_THRESHOLDS = 4;</code>
     */
    public static final int TEMP_ALARM_ENABLED_OUTSIDE_MIN_MAX_THRESHOLDS_VALUE = 4;
    /**
     * <code>TEMP_ALARM_ISOTHERM = 5;</code>
     */
    public static final int TEMP_ALARM_ISOTHERM_VALUE = 5;


    public final int getNumber() { return value; }

    public static TEMP_ALARM_MODE valueOf(int value) {
      switch (value) {
        case 0: return TEMP_ALARM_DISABLED;
        case 1: return TEMP_ALARM_ENABLED_ABOVE_MAX_THRESHOLD;
        case 2: return TEMP_ALARM_ENABLED_BELOW_MIN_THRESHOLD;
        case 3: return TEMP_ALARM_ENABLED_BETWEEN_MIN_MAX_THRESHOLDS;
        case 4: return TEMP_ALARM_ENABLED_OUTSIDE_MIN_MAX_THRESHOLDS;
        case 5: return TEMP_ALARM_ISOTHERM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TEMP_ALARM_MODE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TEMP_ALARM_MODE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TEMP_ALARM_MODE>() {
            public TEMP_ALARM_MODE findValueByNumber(int number) {
              return TEMP_ALARM_MODE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.getDescriptor().getEnumTypes().get(4);
    }

    private static final TEMP_ALARM_MODE[] VALUES = values();

    public static TEMP_ALARM_MODE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private TEMP_ALARM_MODE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:TEMP_ALARM_MODE)
  }

  /**
   * Protobuf enum {@code IsothermColorChoice}
   */
  public enum IsothermColorChoice
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ICC_RED = 0;</code>
     */
    ICC_RED(0, 0),
    /**
     * <code>ICC_BLACK = 1;</code>
     */
    ICC_BLACK(1, 1),
    /**
     * <code>ICC_WHITE = 2;</code>
     */
    ICC_WHITE(2, 2),
    /**
     * <code>ICC_CUSTOM = 3;</code>
     */
    ICC_CUSTOM(3, 3),
    ;

    /**
     * <code>ICC_RED = 0;</code>
     */
    public static final int ICC_RED_VALUE = 0;
    /**
     * <code>ICC_BLACK = 1;</code>
     */
    public static final int ICC_BLACK_VALUE = 1;
    /**
     * <code>ICC_WHITE = 2;</code>
     */
    public static final int ICC_WHITE_VALUE = 2;
    /**
     * <code>ICC_CUSTOM = 3;</code>
     */
    public static final int ICC_CUSTOM_VALUE = 3;


    public final int getNumber() { return value; }

    public static IsothermColorChoice valueOf(int value) {
      switch (value) {
        case 0: return ICC_RED;
        case 1: return ICC_BLACK;
        case 2: return ICC_WHITE;
        case 3: return ICC_CUSTOM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<IsothermColorChoice>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<IsothermColorChoice>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<IsothermColorChoice>() {
            public IsothermColorChoice findValueByNumber(int number) {
              return IsothermColorChoice.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.getDescriptor().getEnumTypes().get(5);
    }

    private static final IsothermColorChoice[] VALUES = values();

    public static IsothermColorChoice valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private IsothermColorChoice(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:IsothermColorChoice)
  }

  public interface IR_PALETTE_DATA_VGPBOrBuilder extends
      // @@protoc_insertion_point(interface_extends:IR_PALETTE_DATA_VGPB)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 paletteSize = 1;</code>
     */
    boolean hasPaletteSize();
    /**
     * <code>required int32 paletteSize = 1;</code>
     */
    int getPaletteSize();

    /**
     * <code>required .PaletteSchemes paletteScheme = 2;</code>
     */
    boolean hasPaletteScheme();
    /**
     * <code>required .PaletteSchemes paletteScheme = 2;</code>
     */
    com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSchemes getPaletteScheme();

    /**
     * <code>required .PaletteScaleMode paletteScaleMode = 3;</code>
     */
    boolean hasPaletteScaleMode();
    /**
     * <code>required .PaletteScaleMode paletteScaleMode = 3;</code>
     */
    com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteScaleMode getPaletteScaleMode();

    /**
     * <code>required .PaletteSaturationColorChoice paletteSaturationColorsChoice = 4;</code>
     */
    boolean hasPaletteSaturationColorsChoice();
    /**
     * <code>required .PaletteSaturationColorChoice paletteSaturationColorsChoice = 4;</code>
     */
    com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSaturationColorChoice getPaletteSaturationColorsChoice();

    /**
     * <code>required .PaletteModeType ultraContrastMode = 5;</code>
     */
    boolean hasUltraContrastMode();
    /**
     * <code>required .PaletteModeType ultraContrastMode = 5;</code>
     */
    com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteModeType getUltraContrastMode();

    /**
     * <code>required float paletteRangeMinTempC = 6;</code>
     */
    boolean hasPaletteRangeMinTempC();
    /**
     * <code>required float paletteRangeMinTempC = 6;</code>
     */
    float getPaletteRangeMinTempC();

    /**
     * <code>required float paletteRangeMaxTempC = 7;</code>
     */
    boolean hasPaletteRangeMaxTempC();
    /**
     * <code>required float paletteRangeMaxTempC = 7;</code>
     */
    float getPaletteRangeMaxTempC();

    /**
     * <code>required .TEMP_ALARM_MODE tempAlarmMode = 8;</code>
     */
    boolean hasTempAlarmMode();
    /**
     * <code>required .TEMP_ALARM_MODE tempAlarmMode = 8;</code>
     */
    com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.TEMP_ALARM_MODE getTempAlarmMode();

    /**
     * <code>required float tempAlarmRangeMinTempC = 9;</code>
     */
    boolean hasTempAlarmRangeMinTempC();
    /**
     * <code>required float tempAlarmRangeMinTempC = 9;</code>
     */
    float getTempAlarmRangeMinTempC();

    /**
     * <code>required float tempAlarmRangeMaxTempC = 10;</code>
     */
    boolean hasTempAlarmRangeMaxTempC();
    /**
     * <code>required float tempAlarmRangeMaxTempC = 10;</code>
     */
    float getTempAlarmRangeMaxTempC();

    /**
     * <code>optional bool tempAlarmIsothermColorMode = 11;</code>
     */
    boolean hasTempAlarmIsothermColorMode();
    /**
     * <code>optional bool tempAlarmIsothermColorMode = 11;</code>
     */
    boolean getTempAlarmIsothermColorMode();

    /**
     * <code>optional float minManualPaletteSpanTempC = 12;</code>
     */
    boolean hasMinManualPaletteSpanTempC();
    /**
     * <code>optional float minManualPaletteSpanTempC = 12;</code>
     */
    float getMinManualPaletteSpanTempC();

    /**
     * <code>optional float minAutoPaletteSpanTempC = 13;</code>
     */
    boolean hasMinAutoPaletteSpanTempC();
    /**
     * <code>optional float minAutoPaletteSpanTempC = 13;</code>
     */
    float getMinAutoPaletteSpanTempC();

    /**
     * <code>optional int32 paletteMinSaturationColorRGB32 = 14;</code>
     */
    boolean hasPaletteMinSaturationColorRGB32();
    /**
     * <code>optional int32 paletteMinSaturationColorRGB32 = 14;</code>
     */
    int getPaletteMinSaturationColorRGB32();

    /**
     * <code>optional int32 paletteMaxSaturationColorRGB32 = 15;</code>
     */
    boolean hasPaletteMaxSaturationColorRGB32();
    /**
     * <code>optional int32 paletteMaxSaturationColorRGB32 = 15;</code>
     */
    int getPaletteMaxSaturationColorRGB32();

    /**
     * <code>optional .IsothermColorChoice isothermColorChoice = 16;</code>
     */
    boolean hasIsothermColorChoice();
    /**
     * <code>optional .IsothermColorChoice isothermColorChoice = 16;</code>
     */
    com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IsothermColorChoice getIsothermColorChoice();

    /**
     * <code>optional int32 isothermColorRGB = 17;</code>
     */
    boolean hasIsothermColorRGB();
    /**
     * <code>optional int32 isothermColorRGB = 17;</code>
     */
    int getIsothermColorRGB();

    /**
     * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
     */
    boolean hasUltracontrastRomulus();
    /**
     * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
     */
    com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS getUltracontrastRomulus();
    /**
     * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
     */
    com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUSOrBuilder getUltracontrastRomulusOrBuilder();

    /**
     * <code>optional int32 irDisplayRampThreshold = 19;</code>
     */
    boolean hasIrDisplayRampThreshold();
    /**
     * <code>optional int32 irDisplayRampThreshold = 19;</code>
     */
    int getIrDisplayRampThreshold();

    /**
     * <code>optional int32 irDisplayRampShift = 20;</code>
     */
    boolean hasIrDisplayRampShift();
    /**
     * <code>optional int32 irDisplayRampShift = 20;</code>
     */
    int getIrDisplayRampShift();
  }
  /**
   * Protobuf type {@code IR_PALETTE_DATA_VGPB}
   */
  public static final class IR_PALETTE_DATA_VGPB extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:IR_PALETTE_DATA_VGPB)
      IR_PALETTE_DATA_VGPBOrBuilder {
    // Use IR_PALETTE_DATA_VGPB.newBuilder() to construct.
    private IR_PALETTE_DATA_VGPB(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IR_PALETTE_DATA_VGPB(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IR_PALETTE_DATA_VGPB defaultInstance;
    public static IR_PALETTE_DATA_VGPB getDefaultInstance() {
      return defaultInstance;
    }

    public IR_PALETTE_DATA_VGPB getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IR_PALETTE_DATA_VGPB(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              paletteSize_ = input.readInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSchemes value = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSchemes.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                paletteScheme_ = value;
              }
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteScaleMode value = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteScaleMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                paletteScaleMode_ = value;
              }
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSaturationColorChoice value = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSaturationColorChoice.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                paletteSaturationColorsChoice_ = value;
              }
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteModeType value = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteModeType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                ultraContrastMode_ = value;
              }
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              paletteRangeMinTempC_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              paletteRangeMaxTempC_ = input.readFloat();
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.TEMP_ALARM_MODE value = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.TEMP_ALARM_MODE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                tempAlarmMode_ = value;
              }
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              tempAlarmRangeMinTempC_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              tempAlarmRangeMaxTempC_ = input.readFloat();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              tempAlarmIsothermColorMode_ = input.readBool();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              minManualPaletteSpanTempC_ = input.readFloat();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              minAutoPaletteSpanTempC_ = input.readFloat();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              paletteMinSaturationColorRGB32_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              paletteMaxSaturationColorRGB32_ = input.readInt32();
              break;
            }
            case 128: {
              int rawValue = input.readEnum();
              com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IsothermColorChoice value = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IsothermColorChoice.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(16, rawValue);
              } else {
                bitField0_ |= 0x00008000;
                isothermColorChoice_ = value;
              }
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              isothermColorRGB_ = input.readInt32();
              break;
            }
            case 146: {
              com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.Builder subBuilder = null;
              if (((bitField0_ & 0x00020000) == 0x00020000)) {
                subBuilder = ultracontrastRomulus_.toBuilder();
              }
              ultracontrastRomulus_ = input.readMessage(com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ultracontrastRomulus_);
                ultracontrastRomulus_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00020000;
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              irDisplayRampThreshold_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              irDisplayRampShift_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.internal_static_IR_PALETTE_DATA_VGPB_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.internal_static_IR_PALETTE_DATA_VGPB_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB.class, com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB.Builder.class);
    }

    public static com.google.protobuf.Parser<IR_PALETTE_DATA_VGPB> PARSER =
        new com.google.protobuf.AbstractParser<IR_PALETTE_DATA_VGPB>() {
      public IR_PALETTE_DATA_VGPB parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IR_PALETTE_DATA_VGPB(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<IR_PALETTE_DATA_VGPB> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PALETTESIZE_FIELD_NUMBER = 1;
    private int paletteSize_;
    /**
     * <code>required int32 paletteSize = 1;</code>
     */
    public boolean hasPaletteSize() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 paletteSize = 1;</code>
     */
    public int getPaletteSize() {
      return paletteSize_;
    }

    public static final int PALETTESCHEME_FIELD_NUMBER = 2;
    private com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSchemes paletteScheme_;
    /**
     * <code>required .PaletteSchemes paletteScheme = 2;</code>
     */
    public boolean hasPaletteScheme() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .PaletteSchemes paletteScheme = 2;</code>
     */
    public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSchemes getPaletteScheme() {
      return paletteScheme_;
    }

    public static final int PALETTESCALEMODE_FIELD_NUMBER = 3;
    private com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteScaleMode paletteScaleMode_;
    /**
     * <code>required .PaletteScaleMode paletteScaleMode = 3;</code>
     */
    public boolean hasPaletteScaleMode() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .PaletteScaleMode paletteScaleMode = 3;</code>
     */
    public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteScaleMode getPaletteScaleMode() {
      return paletteScaleMode_;
    }

    public static final int PALETTESATURATIONCOLORSCHOICE_FIELD_NUMBER = 4;
    private com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSaturationColorChoice paletteSaturationColorsChoice_;
    /**
     * <code>required .PaletteSaturationColorChoice paletteSaturationColorsChoice = 4;</code>
     */
    public boolean hasPaletteSaturationColorsChoice() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .PaletteSaturationColorChoice paletteSaturationColorsChoice = 4;</code>
     */
    public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSaturationColorChoice getPaletteSaturationColorsChoice() {
      return paletteSaturationColorsChoice_;
    }

    public static final int ULTRACONTRASTMODE_FIELD_NUMBER = 5;
    private com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteModeType ultraContrastMode_;
    /**
     * <code>required .PaletteModeType ultraContrastMode = 5;</code>
     */
    public boolean hasUltraContrastMode() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .PaletteModeType ultraContrastMode = 5;</code>
     */
    public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteModeType getUltraContrastMode() {
      return ultraContrastMode_;
    }

    public static final int PALETTERANGEMINTEMPC_FIELD_NUMBER = 6;
    private float paletteRangeMinTempC_;
    /**
     * <code>required float paletteRangeMinTempC = 6;</code>
     */
    public boolean hasPaletteRangeMinTempC() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required float paletteRangeMinTempC = 6;</code>
     */
    public float getPaletteRangeMinTempC() {
      return paletteRangeMinTempC_;
    }

    public static final int PALETTERANGEMAXTEMPC_FIELD_NUMBER = 7;
    private float paletteRangeMaxTempC_;
    /**
     * <code>required float paletteRangeMaxTempC = 7;</code>
     */
    public boolean hasPaletteRangeMaxTempC() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required float paletteRangeMaxTempC = 7;</code>
     */
    public float getPaletteRangeMaxTempC() {
      return paletteRangeMaxTempC_;
    }

    public static final int TEMPALARMMODE_FIELD_NUMBER = 8;
    private com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.TEMP_ALARM_MODE tempAlarmMode_;
    /**
     * <code>required .TEMP_ALARM_MODE tempAlarmMode = 8;</code>
     */
    public boolean hasTempAlarmMode() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required .TEMP_ALARM_MODE tempAlarmMode = 8;</code>
     */
    public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.TEMP_ALARM_MODE getTempAlarmMode() {
      return tempAlarmMode_;
    }

    public static final int TEMPALARMRANGEMINTEMPC_FIELD_NUMBER = 9;
    private float tempAlarmRangeMinTempC_;
    /**
     * <code>required float tempAlarmRangeMinTempC = 9;</code>
     */
    public boolean hasTempAlarmRangeMinTempC() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required float tempAlarmRangeMinTempC = 9;</code>
     */
    public float getTempAlarmRangeMinTempC() {
      return tempAlarmRangeMinTempC_;
    }

    public static final int TEMPALARMRANGEMAXTEMPC_FIELD_NUMBER = 10;
    private float tempAlarmRangeMaxTempC_;
    /**
     * <code>required float tempAlarmRangeMaxTempC = 10;</code>
     */
    public boolean hasTempAlarmRangeMaxTempC() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required float tempAlarmRangeMaxTempC = 10;</code>
     */
    public float getTempAlarmRangeMaxTempC() {
      return tempAlarmRangeMaxTempC_;
    }

    public static final int TEMPALARMISOTHERMCOLORMODE_FIELD_NUMBER = 11;
    private boolean tempAlarmIsothermColorMode_;
    /**
     * <code>optional bool tempAlarmIsothermColorMode = 11;</code>
     */
    public boolean hasTempAlarmIsothermColorMode() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool tempAlarmIsothermColorMode = 11;</code>
     */
    public boolean getTempAlarmIsothermColorMode() {
      return tempAlarmIsothermColorMode_;
    }

    public static final int MINMANUALPALETTESPANTEMPC_FIELD_NUMBER = 12;
    private float minManualPaletteSpanTempC_;
    /**
     * <code>optional float minManualPaletteSpanTempC = 12;</code>
     */
    public boolean hasMinManualPaletteSpanTempC() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float minManualPaletteSpanTempC = 12;</code>
     */
    public float getMinManualPaletteSpanTempC() {
      return minManualPaletteSpanTempC_;
    }

    public static final int MINAUTOPALETTESPANTEMPC_FIELD_NUMBER = 13;
    private float minAutoPaletteSpanTempC_;
    /**
     * <code>optional float minAutoPaletteSpanTempC = 13;</code>
     */
    public boolean hasMinAutoPaletteSpanTempC() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float minAutoPaletteSpanTempC = 13;</code>
     */
    public float getMinAutoPaletteSpanTempC() {
      return minAutoPaletteSpanTempC_;
    }

    public static final int PALETTEMINSATURATIONCOLORRGB32_FIELD_NUMBER = 14;
    private int paletteMinSaturationColorRGB32_;
    /**
     * <code>optional int32 paletteMinSaturationColorRGB32 = 14;</code>
     */
    public boolean hasPaletteMinSaturationColorRGB32() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 paletteMinSaturationColorRGB32 = 14;</code>
     */
    public int getPaletteMinSaturationColorRGB32() {
      return paletteMinSaturationColorRGB32_;
    }

    public static final int PALETTEMAXSATURATIONCOLORRGB32_FIELD_NUMBER = 15;
    private int paletteMaxSaturationColorRGB32_;
    /**
     * <code>optional int32 paletteMaxSaturationColorRGB32 = 15;</code>
     */
    public boolean hasPaletteMaxSaturationColorRGB32() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 paletteMaxSaturationColorRGB32 = 15;</code>
     */
    public int getPaletteMaxSaturationColorRGB32() {
      return paletteMaxSaturationColorRGB32_;
    }

    public static final int ISOTHERMCOLORCHOICE_FIELD_NUMBER = 16;
    private com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IsothermColorChoice isothermColorChoice_;
    /**
     * <code>optional .IsothermColorChoice isothermColorChoice = 16;</code>
     */
    public boolean hasIsothermColorChoice() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .IsothermColorChoice isothermColorChoice = 16;</code>
     */
    public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IsothermColorChoice getIsothermColorChoice() {
      return isothermColorChoice_;
    }

    public static final int ISOTHERMCOLORRGB_FIELD_NUMBER = 17;
    private int isothermColorRGB_;
    /**
     * <code>optional int32 isothermColorRGB = 17;</code>
     */
    public boolean hasIsothermColorRGB() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 isothermColorRGB = 17;</code>
     */
    public int getIsothermColorRGB() {
      return isothermColorRGB_;
    }

    public static final int ULTRACONTRASTROMULUS_FIELD_NUMBER = 18;
    private com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus_;
    /**
     * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
     */
    public boolean hasUltracontrastRomulus() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
     */
    public com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS getUltracontrastRomulus() {
      return ultracontrastRomulus_;
    }
    /**
     * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
     */
    public com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUSOrBuilder getUltracontrastRomulusOrBuilder() {
      return ultracontrastRomulus_;
    }

    public static final int IRDISPLAYRAMPTHRESHOLD_FIELD_NUMBER = 19;
    private int irDisplayRampThreshold_;
    /**
     * <code>optional int32 irDisplayRampThreshold = 19;</code>
     */
    public boolean hasIrDisplayRampThreshold() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 irDisplayRampThreshold = 19;</code>
     */
    public int getIrDisplayRampThreshold() {
      return irDisplayRampThreshold_;
    }

    public static final int IRDISPLAYRAMPSHIFT_FIELD_NUMBER = 20;
    private int irDisplayRampShift_;
    /**
     * <code>optional int32 irDisplayRampShift = 20;</code>
     */
    public boolean hasIrDisplayRampShift() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 irDisplayRampShift = 20;</code>
     */
    public int getIrDisplayRampShift() {
      return irDisplayRampShift_;
    }

    private void initFields() {
      paletteSize_ = 0;
      paletteScheme_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSchemes.PALSCHEME_GRAYSCALE;
      paletteScaleMode_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteScaleMode.PSM_AUTO;
      paletteSaturationColorsChoice_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSaturationColorChoice.PSCC_OFF;
      ultraContrastMode_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteModeType.LINEAR;
      paletteRangeMinTempC_ = 0F;
      paletteRangeMaxTempC_ = 0F;
      tempAlarmMode_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.TEMP_ALARM_MODE.TEMP_ALARM_DISABLED;
      tempAlarmRangeMinTempC_ = 0F;
      tempAlarmRangeMaxTempC_ = 0F;
      tempAlarmIsothermColorMode_ = false;
      minManualPaletteSpanTempC_ = 0F;
      minAutoPaletteSpanTempC_ = 0F;
      paletteMinSaturationColorRGB32_ = 0;
      paletteMaxSaturationColorRGB32_ = 0;
      isothermColorChoice_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IsothermColorChoice.ICC_RED;
      isothermColorRGB_ = 0;
      ultracontrastRomulus_ = com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.getDefaultInstance();
      irDisplayRampThreshold_ = 0;
      irDisplayRampShift_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPaletteSize()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPaletteScheme()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPaletteScaleMode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPaletteSaturationColorsChoice()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUltraContrastMode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPaletteRangeMinTempC()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPaletteRangeMaxTempC()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTempAlarmMode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTempAlarmRangeMinTempC()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTempAlarmRangeMaxTempC()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasUltracontrastRomulus()) {
        if (!getUltracontrastRomulus().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, paletteSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, paletteScheme_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, paletteScaleMode_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, paletteSaturationColorsChoice_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, ultraContrastMode_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, paletteRangeMinTempC_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, paletteRangeMaxTempC_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, tempAlarmMode_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, tempAlarmRangeMinTempC_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, tempAlarmRangeMaxTempC_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(11, tempAlarmIsothermColorMode_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, minManualPaletteSpanTempC_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(13, minAutoPaletteSpanTempC_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, paletteMinSaturationColorRGB32_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, paletteMaxSaturationColorRGB32_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeEnum(16, isothermColorChoice_.getNumber());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(17, isothermColorRGB_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(18, ultracontrastRomulus_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(19, irDisplayRampThreshold_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(20, irDisplayRampShift_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, paletteSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, paletteScheme_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, paletteScaleMode_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, paletteSaturationColorsChoice_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, ultraContrastMode_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, paletteRangeMinTempC_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, paletteRangeMaxTempC_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, tempAlarmMode_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, tempAlarmRangeMinTempC_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, tempAlarmRangeMaxTempC_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, tempAlarmIsothermColorMode_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, minManualPaletteSpanTempC_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, minAutoPaletteSpanTempC_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, paletteMinSaturationColorRGB32_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, paletteMaxSaturationColorRGB32_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(16, isothermColorChoice_.getNumber());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, isothermColorRGB_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, ultracontrastRomulus_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, irDisplayRampThreshold_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, irDisplayRampShift_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code IR_PALETTE_DATA_VGPB}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:IR_PALETTE_DATA_VGPB)
        com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPBOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.internal_static_IR_PALETTE_DATA_VGPB_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.internal_static_IR_PALETTE_DATA_VGPB_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB.class, com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB.Builder.class);
      }

      // Construct using com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUltracontrastRomulusFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        paletteSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        paletteScheme_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSchemes.PALSCHEME_GRAYSCALE;
        bitField0_ = (bitField0_ & ~0x00000002);
        paletteScaleMode_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteScaleMode.PSM_AUTO;
        bitField0_ = (bitField0_ & ~0x00000004);
        paletteSaturationColorsChoice_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSaturationColorChoice.PSCC_OFF;
        bitField0_ = (bitField0_ & ~0x00000008);
        ultraContrastMode_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteModeType.LINEAR;
        bitField0_ = (bitField0_ & ~0x00000010);
        paletteRangeMinTempC_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        paletteRangeMaxTempC_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        tempAlarmMode_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.TEMP_ALARM_MODE.TEMP_ALARM_DISABLED;
        bitField0_ = (bitField0_ & ~0x00000080);
        tempAlarmRangeMinTempC_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        tempAlarmRangeMaxTempC_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        tempAlarmIsothermColorMode_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        minManualPaletteSpanTempC_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        minAutoPaletteSpanTempC_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        paletteMinSaturationColorRGB32_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        paletteMaxSaturationColorRGB32_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        isothermColorChoice_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IsothermColorChoice.ICC_RED;
        bitField0_ = (bitField0_ & ~0x00008000);
        isothermColorRGB_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        if (ultracontrastRomulusBuilder_ == null) {
          ultracontrastRomulus_ = com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.getDefaultInstance();
        } else {
          ultracontrastRomulusBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        irDisplayRampThreshold_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        irDisplayRampShift_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.internal_static_IR_PALETTE_DATA_VGPB_descriptor;
      }

      public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB getDefaultInstanceForType() {
        return com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB.getDefaultInstance();
      }

      public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB build() {
        com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB buildPartial() {
        com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB result = new com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.paletteSize_ = paletteSize_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.paletteScheme_ = paletteScheme_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.paletteScaleMode_ = paletteScaleMode_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.paletteSaturationColorsChoice_ = paletteSaturationColorsChoice_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.ultraContrastMode_ = ultraContrastMode_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.paletteRangeMinTempC_ = paletteRangeMinTempC_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.paletteRangeMaxTempC_ = paletteRangeMaxTempC_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.tempAlarmMode_ = tempAlarmMode_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.tempAlarmRangeMinTempC_ = tempAlarmRangeMinTempC_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.tempAlarmRangeMaxTempC_ = tempAlarmRangeMaxTempC_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.tempAlarmIsothermColorMode_ = tempAlarmIsothermColorMode_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.minManualPaletteSpanTempC_ = minManualPaletteSpanTempC_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.minAutoPaletteSpanTempC_ = minAutoPaletteSpanTempC_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.paletteMinSaturationColorRGB32_ = paletteMinSaturationColorRGB32_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.paletteMaxSaturationColorRGB32_ = paletteMaxSaturationColorRGB32_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.isothermColorChoice_ = isothermColorChoice_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.isothermColorRGB_ = isothermColorRGB_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        if (ultracontrastRomulusBuilder_ == null) {
          result.ultracontrastRomulus_ = ultracontrastRomulus_;
        } else {
          result.ultracontrastRomulus_ = ultracontrastRomulusBuilder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.irDisplayRampThreshold_ = irDisplayRampThreshold_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.irDisplayRampShift_ = irDisplayRampShift_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB) {
          return mergeFrom((com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB other) {
        if (other == com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB.getDefaultInstance()) return this;
        if (other.hasPaletteSize()) {
          setPaletteSize(other.getPaletteSize());
        }
        if (other.hasPaletteScheme()) {
          setPaletteScheme(other.getPaletteScheme());
        }
        if (other.hasPaletteScaleMode()) {
          setPaletteScaleMode(other.getPaletteScaleMode());
        }
        if (other.hasPaletteSaturationColorsChoice()) {
          setPaletteSaturationColorsChoice(other.getPaletteSaturationColorsChoice());
        }
        if (other.hasUltraContrastMode()) {
          setUltraContrastMode(other.getUltraContrastMode());
        }
        if (other.hasPaletteRangeMinTempC()) {
          setPaletteRangeMinTempC(other.getPaletteRangeMinTempC());
        }
        if (other.hasPaletteRangeMaxTempC()) {
          setPaletteRangeMaxTempC(other.getPaletteRangeMaxTempC());
        }
        if (other.hasTempAlarmMode()) {
          setTempAlarmMode(other.getTempAlarmMode());
        }
        if (other.hasTempAlarmRangeMinTempC()) {
          setTempAlarmRangeMinTempC(other.getTempAlarmRangeMinTempC());
        }
        if (other.hasTempAlarmRangeMaxTempC()) {
          setTempAlarmRangeMaxTempC(other.getTempAlarmRangeMaxTempC());
        }
        if (other.hasTempAlarmIsothermColorMode()) {
          setTempAlarmIsothermColorMode(other.getTempAlarmIsothermColorMode());
        }
        if (other.hasMinManualPaletteSpanTempC()) {
          setMinManualPaletteSpanTempC(other.getMinManualPaletteSpanTempC());
        }
        if (other.hasMinAutoPaletteSpanTempC()) {
          setMinAutoPaletteSpanTempC(other.getMinAutoPaletteSpanTempC());
        }
        if (other.hasPaletteMinSaturationColorRGB32()) {
          setPaletteMinSaturationColorRGB32(other.getPaletteMinSaturationColorRGB32());
        }
        if (other.hasPaletteMaxSaturationColorRGB32()) {
          setPaletteMaxSaturationColorRGB32(other.getPaletteMaxSaturationColorRGB32());
        }
        if (other.hasIsothermColorChoice()) {
          setIsothermColorChoice(other.getIsothermColorChoice());
        }
        if (other.hasIsothermColorRGB()) {
          setIsothermColorRGB(other.getIsothermColorRGB());
        }
        if (other.hasUltracontrastRomulus()) {
          mergeUltracontrastRomulus(other.getUltracontrastRomulus());
        }
        if (other.hasIrDisplayRampThreshold()) {
          setIrDisplayRampThreshold(other.getIrDisplayRampThreshold());
        }
        if (other.hasIrDisplayRampShift()) {
          setIrDisplayRampShift(other.getIrDisplayRampShift());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPaletteSize()) {
          
          return false;
        }
        if (!hasPaletteScheme()) {
          
          return false;
        }
        if (!hasPaletteScaleMode()) {
          
          return false;
        }
        if (!hasPaletteSaturationColorsChoice()) {
          
          return false;
        }
        if (!hasUltraContrastMode()) {
          
          return false;
        }
        if (!hasPaletteRangeMinTempC()) {
          
          return false;
        }
        if (!hasPaletteRangeMaxTempC()) {
          
          return false;
        }
        if (!hasTempAlarmMode()) {
          
          return false;
        }
        if (!hasTempAlarmRangeMinTempC()) {
          
          return false;
        }
        if (!hasTempAlarmRangeMaxTempC()) {
          
          return false;
        }
        if (hasUltracontrastRomulus()) {
          if (!getUltracontrastRomulus().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IR_PALETTE_DATA_VGPB) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int paletteSize_ ;
      /**
       * <code>required int32 paletteSize = 1;</code>
       */
      public boolean hasPaletteSize() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 paletteSize = 1;</code>
       */
      public int getPaletteSize() {
        return paletteSize_;
      }
      /**
       * <code>required int32 paletteSize = 1;</code>
       */
      public Builder setPaletteSize(int value) {
        bitField0_ |= 0x00000001;
        paletteSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 paletteSize = 1;</code>
       */
      public Builder clearPaletteSize() {
        bitField0_ = (bitField0_ & ~0x00000001);
        paletteSize_ = 0;
        onChanged();
        return this;
      }

      private com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSchemes paletteScheme_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSchemes.PALSCHEME_GRAYSCALE;
      /**
       * <code>required .PaletteSchemes paletteScheme = 2;</code>
       */
      public boolean hasPaletteScheme() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .PaletteSchemes paletteScheme = 2;</code>
       */
      public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSchemes getPaletteScheme() {
        return paletteScheme_;
      }
      /**
       * <code>required .PaletteSchemes paletteScheme = 2;</code>
       */
      public Builder setPaletteScheme(com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSchemes value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        paletteScheme_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .PaletteSchemes paletteScheme = 2;</code>
       */
      public Builder clearPaletteScheme() {
        bitField0_ = (bitField0_ & ~0x00000002);
        paletteScheme_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSchemes.PALSCHEME_GRAYSCALE;
        onChanged();
        return this;
      }

      private com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteScaleMode paletteScaleMode_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteScaleMode.PSM_AUTO;
      /**
       * <code>required .PaletteScaleMode paletteScaleMode = 3;</code>
       */
      public boolean hasPaletteScaleMode() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .PaletteScaleMode paletteScaleMode = 3;</code>
       */
      public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteScaleMode getPaletteScaleMode() {
        return paletteScaleMode_;
      }
      /**
       * <code>required .PaletteScaleMode paletteScaleMode = 3;</code>
       */
      public Builder setPaletteScaleMode(com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteScaleMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        paletteScaleMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .PaletteScaleMode paletteScaleMode = 3;</code>
       */
      public Builder clearPaletteScaleMode() {
        bitField0_ = (bitField0_ & ~0x00000004);
        paletteScaleMode_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteScaleMode.PSM_AUTO;
        onChanged();
        return this;
      }

      private com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSaturationColorChoice paletteSaturationColorsChoice_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSaturationColorChoice.PSCC_OFF;
      /**
       * <code>required .PaletteSaturationColorChoice paletteSaturationColorsChoice = 4;</code>
       */
      public boolean hasPaletteSaturationColorsChoice() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .PaletteSaturationColorChoice paletteSaturationColorsChoice = 4;</code>
       */
      public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSaturationColorChoice getPaletteSaturationColorsChoice() {
        return paletteSaturationColorsChoice_;
      }
      /**
       * <code>required .PaletteSaturationColorChoice paletteSaturationColorsChoice = 4;</code>
       */
      public Builder setPaletteSaturationColorsChoice(com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSaturationColorChoice value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        paletteSaturationColorsChoice_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .PaletteSaturationColorChoice paletteSaturationColorsChoice = 4;</code>
       */
      public Builder clearPaletteSaturationColorsChoice() {
        bitField0_ = (bitField0_ & ~0x00000008);
        paletteSaturationColorsChoice_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteSaturationColorChoice.PSCC_OFF;
        onChanged();
        return this;
      }

      private com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteModeType ultraContrastMode_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteModeType.LINEAR;
      /**
       * <code>required .PaletteModeType ultraContrastMode = 5;</code>
       */
      public boolean hasUltraContrastMode() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .PaletteModeType ultraContrastMode = 5;</code>
       */
      public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteModeType getUltraContrastMode() {
        return ultraContrastMode_;
      }
      /**
       * <code>required .PaletteModeType ultraContrastMode = 5;</code>
       */
      public Builder setUltraContrastMode(com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteModeType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        ultraContrastMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .PaletteModeType ultraContrastMode = 5;</code>
       */
      public Builder clearUltraContrastMode() {
        bitField0_ = (bitField0_ & ~0x00000010);
        ultraContrastMode_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.PaletteModeType.LINEAR;
        onChanged();
        return this;
      }

      private float paletteRangeMinTempC_ ;
      /**
       * <code>required float paletteRangeMinTempC = 6;</code>
       */
      public boolean hasPaletteRangeMinTempC() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required float paletteRangeMinTempC = 6;</code>
       */
      public float getPaletteRangeMinTempC() {
        return paletteRangeMinTempC_;
      }
      /**
       * <code>required float paletteRangeMinTempC = 6;</code>
       */
      public Builder setPaletteRangeMinTempC(float value) {
        bitField0_ |= 0x00000020;
        paletteRangeMinTempC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float paletteRangeMinTempC = 6;</code>
       */
      public Builder clearPaletteRangeMinTempC() {
        bitField0_ = (bitField0_ & ~0x00000020);
        paletteRangeMinTempC_ = 0F;
        onChanged();
        return this;
      }

      private float paletteRangeMaxTempC_ ;
      /**
       * <code>required float paletteRangeMaxTempC = 7;</code>
       */
      public boolean hasPaletteRangeMaxTempC() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required float paletteRangeMaxTempC = 7;</code>
       */
      public float getPaletteRangeMaxTempC() {
        return paletteRangeMaxTempC_;
      }
      /**
       * <code>required float paletteRangeMaxTempC = 7;</code>
       */
      public Builder setPaletteRangeMaxTempC(float value) {
        bitField0_ |= 0x00000040;
        paletteRangeMaxTempC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float paletteRangeMaxTempC = 7;</code>
       */
      public Builder clearPaletteRangeMaxTempC() {
        bitField0_ = (bitField0_ & ~0x00000040);
        paletteRangeMaxTempC_ = 0F;
        onChanged();
        return this;
      }

      private com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.TEMP_ALARM_MODE tempAlarmMode_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.TEMP_ALARM_MODE.TEMP_ALARM_DISABLED;
      /**
       * <code>required .TEMP_ALARM_MODE tempAlarmMode = 8;</code>
       */
      public boolean hasTempAlarmMode() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required .TEMP_ALARM_MODE tempAlarmMode = 8;</code>
       */
      public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.TEMP_ALARM_MODE getTempAlarmMode() {
        return tempAlarmMode_;
      }
      /**
       * <code>required .TEMP_ALARM_MODE tempAlarmMode = 8;</code>
       */
      public Builder setTempAlarmMode(com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.TEMP_ALARM_MODE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        tempAlarmMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .TEMP_ALARM_MODE tempAlarmMode = 8;</code>
       */
      public Builder clearTempAlarmMode() {
        bitField0_ = (bitField0_ & ~0x00000080);
        tempAlarmMode_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.TEMP_ALARM_MODE.TEMP_ALARM_DISABLED;
        onChanged();
        return this;
      }

      private float tempAlarmRangeMinTempC_ ;
      /**
       * <code>required float tempAlarmRangeMinTempC = 9;</code>
       */
      public boolean hasTempAlarmRangeMinTempC() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required float tempAlarmRangeMinTempC = 9;</code>
       */
      public float getTempAlarmRangeMinTempC() {
        return tempAlarmRangeMinTempC_;
      }
      /**
       * <code>required float tempAlarmRangeMinTempC = 9;</code>
       */
      public Builder setTempAlarmRangeMinTempC(float value) {
        bitField0_ |= 0x00000100;
        tempAlarmRangeMinTempC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float tempAlarmRangeMinTempC = 9;</code>
       */
      public Builder clearTempAlarmRangeMinTempC() {
        bitField0_ = (bitField0_ & ~0x00000100);
        tempAlarmRangeMinTempC_ = 0F;
        onChanged();
        return this;
      }

      private float tempAlarmRangeMaxTempC_ ;
      /**
       * <code>required float tempAlarmRangeMaxTempC = 10;</code>
       */
      public boolean hasTempAlarmRangeMaxTempC() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required float tempAlarmRangeMaxTempC = 10;</code>
       */
      public float getTempAlarmRangeMaxTempC() {
        return tempAlarmRangeMaxTempC_;
      }
      /**
       * <code>required float tempAlarmRangeMaxTempC = 10;</code>
       */
      public Builder setTempAlarmRangeMaxTempC(float value) {
        bitField0_ |= 0x00000200;
        tempAlarmRangeMaxTempC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float tempAlarmRangeMaxTempC = 10;</code>
       */
      public Builder clearTempAlarmRangeMaxTempC() {
        bitField0_ = (bitField0_ & ~0x00000200);
        tempAlarmRangeMaxTempC_ = 0F;
        onChanged();
        return this;
      }

      private boolean tempAlarmIsothermColorMode_ ;
      /**
       * <code>optional bool tempAlarmIsothermColorMode = 11;</code>
       */
      public boolean hasTempAlarmIsothermColorMode() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool tempAlarmIsothermColorMode = 11;</code>
       */
      public boolean getTempAlarmIsothermColorMode() {
        return tempAlarmIsothermColorMode_;
      }
      /**
       * <code>optional bool tempAlarmIsothermColorMode = 11;</code>
       */
      public Builder setTempAlarmIsothermColorMode(boolean value) {
        bitField0_ |= 0x00000400;
        tempAlarmIsothermColorMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool tempAlarmIsothermColorMode = 11;</code>
       */
      public Builder clearTempAlarmIsothermColorMode() {
        bitField0_ = (bitField0_ & ~0x00000400);
        tempAlarmIsothermColorMode_ = false;
        onChanged();
        return this;
      }

      private float minManualPaletteSpanTempC_ ;
      /**
       * <code>optional float minManualPaletteSpanTempC = 12;</code>
       */
      public boolean hasMinManualPaletteSpanTempC() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float minManualPaletteSpanTempC = 12;</code>
       */
      public float getMinManualPaletteSpanTempC() {
        return minManualPaletteSpanTempC_;
      }
      /**
       * <code>optional float minManualPaletteSpanTempC = 12;</code>
       */
      public Builder setMinManualPaletteSpanTempC(float value) {
        bitField0_ |= 0x00000800;
        minManualPaletteSpanTempC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float minManualPaletteSpanTempC = 12;</code>
       */
      public Builder clearMinManualPaletteSpanTempC() {
        bitField0_ = (bitField0_ & ~0x00000800);
        minManualPaletteSpanTempC_ = 0F;
        onChanged();
        return this;
      }

      private float minAutoPaletteSpanTempC_ ;
      /**
       * <code>optional float minAutoPaletteSpanTempC = 13;</code>
       */
      public boolean hasMinAutoPaletteSpanTempC() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float minAutoPaletteSpanTempC = 13;</code>
       */
      public float getMinAutoPaletteSpanTempC() {
        return minAutoPaletteSpanTempC_;
      }
      /**
       * <code>optional float minAutoPaletteSpanTempC = 13;</code>
       */
      public Builder setMinAutoPaletteSpanTempC(float value) {
        bitField0_ |= 0x00001000;
        minAutoPaletteSpanTempC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float minAutoPaletteSpanTempC = 13;</code>
       */
      public Builder clearMinAutoPaletteSpanTempC() {
        bitField0_ = (bitField0_ & ~0x00001000);
        minAutoPaletteSpanTempC_ = 0F;
        onChanged();
        return this;
      }

      private int paletteMinSaturationColorRGB32_ ;
      /**
       * <code>optional int32 paletteMinSaturationColorRGB32 = 14;</code>
       */
      public boolean hasPaletteMinSaturationColorRGB32() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 paletteMinSaturationColorRGB32 = 14;</code>
       */
      public int getPaletteMinSaturationColorRGB32() {
        return paletteMinSaturationColorRGB32_;
      }
      /**
       * <code>optional int32 paletteMinSaturationColorRGB32 = 14;</code>
       */
      public Builder setPaletteMinSaturationColorRGB32(int value) {
        bitField0_ |= 0x00002000;
        paletteMinSaturationColorRGB32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 paletteMinSaturationColorRGB32 = 14;</code>
       */
      public Builder clearPaletteMinSaturationColorRGB32() {
        bitField0_ = (bitField0_ & ~0x00002000);
        paletteMinSaturationColorRGB32_ = 0;
        onChanged();
        return this;
      }

      private int paletteMaxSaturationColorRGB32_ ;
      /**
       * <code>optional int32 paletteMaxSaturationColorRGB32 = 15;</code>
       */
      public boolean hasPaletteMaxSaturationColorRGB32() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 paletteMaxSaturationColorRGB32 = 15;</code>
       */
      public int getPaletteMaxSaturationColorRGB32() {
        return paletteMaxSaturationColorRGB32_;
      }
      /**
       * <code>optional int32 paletteMaxSaturationColorRGB32 = 15;</code>
       */
      public Builder setPaletteMaxSaturationColorRGB32(int value) {
        bitField0_ |= 0x00004000;
        paletteMaxSaturationColorRGB32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 paletteMaxSaturationColorRGB32 = 15;</code>
       */
      public Builder clearPaletteMaxSaturationColorRGB32() {
        bitField0_ = (bitField0_ & ~0x00004000);
        paletteMaxSaturationColorRGB32_ = 0;
        onChanged();
        return this;
      }

      private com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IsothermColorChoice isothermColorChoice_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IsothermColorChoice.ICC_RED;
      /**
       * <code>optional .IsothermColorChoice isothermColorChoice = 16;</code>
       */
      public boolean hasIsothermColorChoice() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .IsothermColorChoice isothermColorChoice = 16;</code>
       */
      public com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IsothermColorChoice getIsothermColorChoice() {
        return isothermColorChoice_;
      }
      /**
       * <code>optional .IsothermColorChoice isothermColorChoice = 16;</code>
       */
      public Builder setIsothermColorChoice(com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IsothermColorChoice value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00008000;
        isothermColorChoice_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .IsothermColorChoice isothermColorChoice = 16;</code>
       */
      public Builder clearIsothermColorChoice() {
        bitField0_ = (bitField0_ & ~0x00008000);
        isothermColorChoice_ = com.aolais.electroraven.is2viewerbeta.protos.IrPaletteDataVGPB.IsothermColorChoice.ICC_RED;
        onChanged();
        return this;
      }

      private int isothermColorRGB_ ;
      /**
       * <code>optional int32 isothermColorRGB = 17;</code>
       */
      public boolean hasIsothermColorRGB() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 isothermColorRGB = 17;</code>
       */
      public int getIsothermColorRGB() {
        return isothermColorRGB_;
      }
      /**
       * <code>optional int32 isothermColorRGB = 17;</code>
       */
      public Builder setIsothermColorRGB(int value) {
        bitField0_ |= 0x00010000;
        isothermColorRGB_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 isothermColorRGB = 17;</code>
       */
      public Builder clearIsothermColorRGB() {
        bitField0_ = (bitField0_ & ~0x00010000);
        isothermColorRGB_ = 0;
        onChanged();
        return this;
      }

      private com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus_ = com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS, com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.Builder, com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUSOrBuilder> ultracontrastRomulusBuilder_;
      /**
       * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
       */
      public boolean hasUltracontrastRomulus() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
       */
      public com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS getUltracontrastRomulus() {
        if (ultracontrastRomulusBuilder_ == null) {
          return ultracontrastRomulus_;
        } else {
          return ultracontrastRomulusBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
       */
      public Builder setUltracontrastRomulus(com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS value) {
        if (ultracontrastRomulusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ultracontrastRomulus_ = value;
          onChanged();
        } else {
          ultracontrastRomulusBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
       */
      public Builder setUltracontrastRomulus(
          com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.Builder builderForValue) {
        if (ultracontrastRomulusBuilder_ == null) {
          ultracontrastRomulus_ = builderForValue.build();
          onChanged();
        } else {
          ultracontrastRomulusBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
       */
      public Builder mergeUltracontrastRomulus(com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS value) {
        if (ultracontrastRomulusBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              ultracontrastRomulus_ != com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.getDefaultInstance()) {
            ultracontrastRomulus_ =
              com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.newBuilder(ultracontrastRomulus_).mergeFrom(value).buildPartial();
          } else {
            ultracontrastRomulus_ = value;
          }
          onChanged();
        } else {
          ultracontrastRomulusBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
       */
      public Builder clearUltracontrastRomulus() {
        if (ultracontrastRomulusBuilder_ == null) {
          ultracontrastRomulus_ = com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.getDefaultInstance();
          onChanged();
        } else {
          ultracontrastRomulusBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
       */
      public com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.Builder getUltracontrastRomulusBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getUltracontrastRomulusFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
       */
      public com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUSOrBuilder getUltracontrastRomulusOrBuilder() {
        if (ultracontrastRomulusBuilder_ != null) {
          return ultracontrastRomulusBuilder_.getMessageOrBuilder();
        } else {
          return ultracontrastRomulus_;
        }
      }
      /**
       * <code>optional .ULTRACONTRAST_CONFIG_ROMULUS ultracontrastRomulus = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS, com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.Builder, com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUSOrBuilder> 
          getUltracontrastRomulusFieldBuilder() {
        if (ultracontrastRomulusBuilder_ == null) {
          ultracontrastRomulusBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS, com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUS.Builder, com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.ULTRACONTRAST_CONFIG_ROMULUSOrBuilder>(
                  getUltracontrastRomulus(),
                  getParentForChildren(),
                  isClean());
          ultracontrastRomulus_ = null;
        }
        return ultracontrastRomulusBuilder_;
      }

      private int irDisplayRampThreshold_ ;
      /**
       * <code>optional int32 irDisplayRampThreshold = 19;</code>
       */
      public boolean hasIrDisplayRampThreshold() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 irDisplayRampThreshold = 19;</code>
       */
      public int getIrDisplayRampThreshold() {
        return irDisplayRampThreshold_;
      }
      /**
       * <code>optional int32 irDisplayRampThreshold = 19;</code>
       */
      public Builder setIrDisplayRampThreshold(int value) {
        bitField0_ |= 0x00040000;
        irDisplayRampThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 irDisplayRampThreshold = 19;</code>
       */
      public Builder clearIrDisplayRampThreshold() {
        bitField0_ = (bitField0_ & ~0x00040000);
        irDisplayRampThreshold_ = 0;
        onChanged();
        return this;
      }

      private int irDisplayRampShift_ ;
      /**
       * <code>optional int32 irDisplayRampShift = 20;</code>
       */
      public boolean hasIrDisplayRampShift() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 irDisplayRampShift = 20;</code>
       */
      public int getIrDisplayRampShift() {
        return irDisplayRampShift_;
      }
      /**
       * <code>optional int32 irDisplayRampShift = 20;</code>
       */
      public Builder setIrDisplayRampShift(int value) {
        bitField0_ |= 0x00080000;
        irDisplayRampShift_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 irDisplayRampShift = 20;</code>
       */
      public Builder clearIrDisplayRampShift() {
        bitField0_ = (bitField0_ & ~0x00080000);
        irDisplayRampShift_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:IR_PALETTE_DATA_VGPB)
    }

    static {
      defaultInstance = new IR_PALETTE_DATA_VGPB(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:IR_PALETTE_DATA_VGPB)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_IR_PALETTE_DATA_VGPB_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_IR_PALETTE_DATA_VGPB_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\032IR_PALETTE_DATA_VGPB.proto\032\"ULTRACONTR" +
      "AST_CONFIG_ROMULUS.proto\"\226\006\n\024IR_PALETTE_" +
      "DATA_VGPB\022\023\n\013paletteSize\030\001 \002(\005\022&\n\rpalett" +
      "eScheme\030\002 \002(\0162\017.PaletteSchemes\022+\n\020palett" +
      "eScaleMode\030\003 \002(\0162\021.PaletteScaleMode\022D\n\035p" +
      "aletteSaturationColorsChoice\030\004 \002(\0162\035.Pal" +
      "etteSaturationColorChoice\022+\n\021ultraContra" +
      "stMode\030\005 \002(\0162\020.PaletteModeType\022\034\n\024palett" +
      "eRangeMinTempC\030\006 \002(\002\022\034\n\024paletteRangeMaxT" +
      "empC\030\007 \002(\002\022\'\n\rtempAlarmMode\030\010 \002(\0162\020.TEMP",
      "_ALARM_MODE\022\036\n\026tempAlarmRangeMinTempC\030\t " +
      "\002(\002\022\036\n\026tempAlarmRangeMaxTempC\030\n \002(\002\022\"\n\032t" +
      "empAlarmIsothermColorMode\030\013 \001(\010\022!\n\031minMa" +
      "nualPaletteSpanTempC\030\014 \001(\002\022\037\n\027minAutoPal" +
      "etteSpanTempC\030\r \001(\002\022&\n\036paletteMinSaturat" +
      "ionColorRGB32\030\016 \001(\005\022&\n\036paletteMaxSaturat" +
      "ionColorRGB32\030\017 \001(\005\0221\n\023isothermColorChoi" +
      "ce\030\020 \001(\0162\024.IsothermColorChoice\022\030\n\020isothe" +
      "rmColorRGB\030\021 \001(\005\022;\n\024ultracontrastRomulus" +
      "\030\022 \001(\0132\035.ULTRACONTRAST_CONFIG_ROMULUS\022\036\n",
      "\026irDisplayRampThreshold\030\023 \001(\005\022\032\n\022irDispl" +
      "ayRampShift\030\024 \001(\005*\255\003\n\016PaletteSchemes\022\027\n\023" +
      "PALSCHEME_GRAYSCALE\020\000\022 \n\034PALSCHEME_GRAYS" +
      "CALE_INVERTED\020\001\022\025\n\021PALSCHEME_BLUERED\020\002\022\032" +
      "\n\026PALSCHEME_HIGHCONTRAST\020\003\022\026\n\022PALSCHEME_" +
      "HOTMETAL\020\004\022\025\n\021PALSCHEME_IRONBOW\020\005\022\023\n\017PAL" +
      "SCHEME_AMBER\020\006\022\034\n\030PALSCHEME_AMBER_INVERT" +
      "ED\020\007\022\025\n\021PALSCHEME_RAINBOW\020\010\022\030\n\024PALSCHEME" +
      "_RAINBOW900\020\t\022\025\n\021PALSCHEME_GLOWBOW\020\n\022\024\n\020" +
      "PALSCHEME_CUSTOM\020\013\022\036\n\032PALSCHEME_HIGH_CON",
      "TRAST_VT\020\014\022\030\n\024PALSCHEME_RAINBOW_VT\020\r\022\030\n\024" +
      "PALSCHEME_IRONBOW_VT\020\016\022\031\n\025PALSCHEME_HOTM" +
      "ETAL_VT\020\017*T\n\020PaletteScaleMode\022\014\n\010PSM_AUT" +
      "O\020\000\022\017\n\013PSM_FIX_MAX\020\001\022\017\n\013PSM_FIX_MIN\020\002\022\020\n" +
      "\014PSM_FIX_BOTH\020\003*w\n\034PaletteSaturationColo" +
      "rChoice\022\014\n\010PSCC_OFF\020\000\022\021\n\rPSCC_STANDARD\020\001" +
      "\022\023\n\017PSCC_WHITEBLACK\020\002\022\020\n\014PSCC_REDBLUE\020\003\022" +
      "\017\n\013PSCC_CUSTOM\020\004*1\n\017PaletteModeType\022\n\n\006L" +
      "INEAR\020\000\022\022\n\016ULTRA_CONTRAST\020\001*\201\002\n\017TEMP_ALA" +
      "RM_MODE\022\027\n\023TEMP_ALARM_DISABLED\020\000\022*\n&TEMP",
      "_ALARM_ENABLED_ABOVE_MAX_THRESHOLD\020\001\022*\n&" +
      "TEMP_ALARM_ENABLED_BELOW_MIN_THRESHOLD\020\002" +
      "\0221\n-TEMP_ALARM_ENABLED_BETWEEN_MIN_MAX_T" +
      "HRESHOLDS\020\003\0221\n-TEMP_ALARM_ENABLED_OUTSID" +
      "E_MIN_MAX_THRESHOLDS\020\004\022\027\n\023TEMP_ALARM_ISO" +
      "THERM\020\005*P\n\023IsothermColorChoice\022\013\n\007ICC_RE" +
      "D\020\000\022\r\n\tICC_BLACK\020\001\022\r\n\tICC_WHITE\020\002\022\016\n\nICC" +
      "_CUSTOM\020\003BA\n,com.aolais.electroraven.is2" +
      "viewerbeta.protosB\021IrPaletteDataVGPB"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.getDescriptor(),
        }, assigner);
    internal_static_IR_PALETTE_DATA_VGPB_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_IR_PALETTE_DATA_VGPB_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_IR_PALETTE_DATA_VGPB_descriptor,
        new java.lang.String[] { "PaletteSize", "PaletteScheme", "PaletteScaleMode", "PaletteSaturationColorsChoice", "UltraContrastMode", "PaletteRangeMinTempC", "PaletteRangeMaxTempC", "TempAlarmMode", "TempAlarmRangeMinTempC", "TempAlarmRangeMaxTempC", "TempAlarmIsothermColorMode", "MinManualPaletteSpanTempC", "MinAutoPaletteSpanTempC", "PaletteMinSaturationColorRGB32", "PaletteMaxSaturationColorRGB32", "IsothermColorChoice", "IsothermColorRGB", "UltracontrastRomulus", "IrDisplayRampThreshold", "IrDisplayRampShift", });
    com.aolais.electroraven.is2viewerbeta.protos.UltraContrastConfigRomulus.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
